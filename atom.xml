<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Peikai Guo]]></title>
  <subtitle><![CDATA[A Web Developer Blog]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://dujushi.github.io/"/>
  <updated>2016-01-11T22:15:26.000Z</updated>
  <id>http://dujushi.github.io/</id>
  
  <author>
    <name><![CDATA[Peikai Guo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Google Distance Matrix API with HttpClient and Json.NET]]></title>
    <link href="http://dujushi.github.io/2016/01/12/Google-Distance-Matrix-API-with-HttpClient-and-Json-NET/"/>
    <id>http://dujushi.github.io/2016/01/12/Google-Distance-Matrix-API-with-HttpClient-and-Json-NET/</id>
    <published>2016-01-11T21:34:12.000Z</published>
    <updated>2016-01-11T22:15:26.000Z</updated>
    <content type="html"><![CDATA[<p>  Google Map is excellent. So is Google Map API. This article will create a simple class with HttpClient and Json.NET to utilise Google Distance Matrix API.</p>
<ol>
<li>Add System.Net.Http reference for HttpClient and install Newtonsoft.Json Nuget Package</li>
<li><p>Add API Url and API Key settings into Web.config</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">appSettings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">add</span> <span class="attribute">key</span>=<span class="value">"GoogleDistanceMatrixApiUrl"</span> <span class="attribute">value</span>=<span class="value">"https://maps.googleapis.com/maps/api/distancematrix/json"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">add</span> <span class="attribute">key</span>=<span class="value">"GoogleDistanceMatrixApiKey"</span> <span class="attribute">value</span>=<span class="value">"YOUR API KEY"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">appSettings</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>GoogleDistanceMatrixApi Constructor</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GoogleDistanceMatrixApi</span>(<span class="params"><span class="keyword">string</span>[] originAddresses, <span class="keyword">string</span>[] destinationAddresses</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    OriginAddresses = originAddresses;</span><br><span class="line">    DestinationAddresses = destinationAddresses;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> appSettings = ConfigurationManager.AppSettings;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(appSettings[<span class="string">"GoogleDistanceMatrixApiUrl"</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"GoogleDistanceMatrixApiUrl is not set in AppSettings."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Url = appSettings[<span class="string">"GoogleDistanceMatrixApiUrl"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(appSettings[<span class="string">"GoogleDistanceMatrixApiKey"</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"GoogleDistanceMatrixApiKey is not set in AppSettings."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Key = appSettings[<span class="string">"GoogleDistanceMatrixApiKey"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The constructor receives origin addresses and destination addresses from the user and it gets App Url and Key settings from AppSettings. If the Url and Key settings are missing, it will throw an exception.</p>
</li>
<li><p>Generate request url</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> GetRequestUrl()</span><br><span class="line">&#123;</span><br><span class="line">    OriginAddresses = OriginAddresses<span class="built_in">.</span><span class="keyword">Select</span>(HttpUtility<span class="built_in">.</span>UrlEncode)<span class="built_in">.</span>ToArray();</span><br><span class="line">    <span class="built_in">var</span> origins = <span class="built_in">string</span><span class="built_in">.</span><span class="keyword">Join</span>(<span class="string">"|"</span>, OriginAddresses);</span><br><span class="line">    DestinationAddresses = DestinationAddresses<span class="built_in">.</span><span class="keyword">Select</span>(HttpUtility<span class="built_in">.</span>UrlEncode)<span class="built_in">.</span>ToArray();</span><br><span class="line">    <span class="built_in">var</span> destinations = <span class="built_in">string</span><span class="built_in">.</span><span class="keyword">Join</span>(<span class="string">"|"</span>, DestinationAddresses);</span><br><span class="line">    <span class="keyword">return</span> $<span class="string">"&#123;Url&#125;?origins=&#123;origins&#125;&amp;destinations=&#123;destinations&#125;&amp;key=&#123;Key&#125;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>All addresses need to be url encoded.</p>
</li>
<li><p>Response Ojbect</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Response</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Status &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [JsonProperty(PropertyName = <span class="string">"origin_addresses"</span>)]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> [] OriginAddresses &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [JsonProperty(PropertyName = <span class="string">"destination_addresses"</span>)]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> [] DestinationAddresses &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Row [] Rows &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Data</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Value &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Text &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Element</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Status &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> Data Duration &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> Data Distance &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Row</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> Element[] Elements &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This Response class maps API response. Json.NET can parse Json into a C# class. It is handy for us to analyse the result later on. We use JsonProperty attribute here to map Json properties to class properties if they are different.</p>
</li>
<li><p>Request with HttpClient</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;Response&gt; <span class="title">GetResponse</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> client = <span class="keyword">new</span> HttpClient())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> uri = <span class="keyword">new</span> Uri(GetRequestUrl());</span><br><span class="line"></span><br><span class="line">        HttpResponseMessage response = <span class="keyword">await</span> client.GetAsync(uri);</span><br><span class="line">        <span class="keyword">if</span> (!response.IsSuccessStatusCode)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"GoogleDistanceMatrixApi failed with status code: "</span> + response.StatusCode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> content = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">            <span class="keyword">return</span> JsonConvert.DeserializeObject&lt;Response&gt;(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>HttpClient’s built in async feature makes program efficient. JsonConvert parses Json response into a Response class we defined.</p>
</li>
<li>Usage<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">Index</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    GoogleDistanceMatrixApi api = <span class="keyword">new</span> GoogleDistanceMatrixApi(<span class="keyword">new</span> [] &#123; <span class="string">"Auckland Airport"</span> &#125; , <span class="keyword">new</span> [] &#123; <span class="string">"Corner Princes Street and Waterloo Quadrant"</span> &#125;);</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> api.GetResponse();</span><br><span class="line">    <span class="keyword">return</span> Json(response, JsonRequestBehavior.AllowGet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Gist">Gist</h3><p><a href="https://gist.github.com/dujushi/86a6555f0df73bb8ced4" target="_blank" rel="external">https://gist.github.com/dujushi/86a6555f0df73bb8ced4</a></p>
<h3 id="References">References</h3><ol>
<li><a href="https://developers.google.com/maps/documentation/distance-matrix/intro" target="_blank" rel="external">The Google Maps Distance Matrix API</a></li>
<li><a href="http://www.newtonsoft.com/json" target="_blank" rel="external">Json.NET</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/hh300224.aspx#BKMK_CompleteCodeExamples" target="_blank" rel="external">Walkthrough: Accessing the Web by Using Async and Await (C# and Visual Basic)</a></li>
<li><a href="https://msdn.microsoft.com/en-us/library/system.configuration.configurationmanager.appsettings(v=vs.110" target="_blank" rel="external">ConfigurationManager.AppSettings Property</a>.aspx)</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>  Google Map is excellent. So is Google Map API. This article will create a simple class with HttpClient and Json.NET to utilise Google D]]>
    </summary>
    
      <category term="Google Distance Matrix API" scheme="http://dujushi.github.io/tags/Google-Distance-Matrix-API/"/>
    
      <category term="HttpClient" scheme="http://dujushi.github.io/tags/HttpClient/"/>
    
      <category term="Json.NET" scheme="http://dujushi.github.io/tags/Json-NET/"/>
    
      <category term="Web Service" scheme="http://dujushi.github.io/categories/Web-Service/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Front End Automation With Gulp]]></title>
    <link href="http://dujushi.github.io/2015/12/29/Front-End-Automation-With-Gulp/"/>
    <id>http://dujushi.github.io/2015/12/29/Front-End-Automation-With-Gulp/</id>
    <published>2015-12-29T02:27:11.000Z</published>
    <updated>2016-01-11T21:52:12.000Z</updated>
    <content type="html"><![CDATA[<p>Gulp is a great tool for front end automation tasks. In this article I will show you how I use Gulp to boost my front end development efficiency.<a id="more"></a> </p>
<h3 id="Gulp_Plugins">Gulp Plugins</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulpLoadPlugins = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>);</span><br><span class="line"><span class="keyword">var</span> plugins = gulpLoadPlugins();</span><br></pre></td></tr></table></figure>
<p>We will use lots of Gulp plugins in our tasks. With gulp-load-plugins we don’t need to import them mannually.</p>
<h3 id="Config">Config</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">var config = </span><span class="expression">&#123;</span><br><span class="line">    <span class="variable">production</span>: !!<span class="variable">plugins.util.env.production</span>,</span><br><span class="line">	<span class="variable">port</span>: 9005,</span><br><span class="line">	<span class="variable">devBaseUrl</span>: '<span class="variable">http</span>:/<span class="end-block">/localhost</span>',</span><br><span class="line">	<span class="variable">paths</span>: &#123;</span><br><span class="line">		<span class="variable">mainJs</span>: '<span class="variable">.</span><span class="end-block">/src</span><span class="end-block">/main.js</span>',</span><br><span class="line">		<span class="variable">appJs</span>: '<span class="variable">.</span><span class="end-block">/src</span><span class="end-block">/app</span>/**/*<span class="variable">.js</span>',</span><br><span class="line">		<span class="variable">scss</span>: '<span class="variable">.</span><span class="end-block">/src</span>/**/*<span class="variable">.scss</span>',</span><br><span class="line">		<span class="variable">html</span>: '<span class="variable">.</span><span class="end-block">/src</span>/*<span class="variable">.html</span>',</span><br><span class="line">		<span class="variable">build</span>: '<span class="variable">.</span><span class="end-block">/build</span>'</span><br><span class="line">	&#125;</span><span class="xml"></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Define a config variable for all our settings so we can reuse them throughout the file and it makes the code more friendly. We use gulp-util to set our environment. Append –production to ./node_modules/.bin/gulp command to tell him, “We are now on production. Don’t generate source maps. Don’t instantiate local server. Thanks!” </p>
<h3 id="Sass">Sass</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">gulp</span><span class="class">.task</span>(<span class="string">'scss'</span>, function () &#123;</span><br><span class="line">    <span class="tag">return</span> <span class="tag">gulp</span><span class="class">.src</span>(config.paths.scss)</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">if</span>(!config.production, plugins.sourcemaps.<span class="function">init</span>()))</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">sass</span>()<span class="class">.on</span>(<span class="string">'error'</span>, plugins.sass.logError))</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">concat</span>(<span class="string">'bundle.min.css'</span>))</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">minifyCss</span>())</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">rev</span>())</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">if</span>(!config.production, plugins.sourcemaps.<span class="function">write</span>(<span class="string">'.'</span>)))</span><br><span class="line">        <span class="class">.pipe</span>(gulp.<span class="function">dest</span>(config.paths.build))</span><br><span class="line">        <span class="class">.pipe</span>(plugins.rev.<span class="function">manifest</span>(config.paths.build + <span class="string">"/rev-manifest-css.json"</span>, &#123;<span class="attribute">cwd</span>: config.paths.build + <span class="string">"/"</span>, <span class="attribute">base</span>: config.paths.build + <span class="string">"/"</span>, <span class="attribute">merge</span>: true&#125;))</span><br><span class="line">        <span class="class">.pipe</span>(gulp.<span class="function">dest</span>(config.paths.build));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>This task takes all scss files, parse/bundle/minify/revision, and generate source map. When we use “inspect” in browser, brower will show us the original scss file instead of minified css thanks to source map. And we use gulp-if to prevent generating source map on production.</p>
<h3 id="React">React</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">gulp</span><span class="class">.task</span>(<span class="string">'js'</span>, <span class="function">function</span>() &#123;</span><br><span class="line">    <span class="tag">return</span> <span class="tag">browserify</span>(config.paths.mainJs, &#123;<span class="tag">paths</span>: <span class="attr_selector">['./bower_components/react']</span>&#125;)</span><br><span class="line">        <span class="class">.transform</span>(<span class="string">"babelify"</span>, &#123;<span class="tag">presets</span>: <span class="attr_selector">["react"]</span>&#125;)</span><br><span class="line">        <span class="class">.bundle</span>()</span><br><span class="line">        <span class="class">.on</span>(<span class="string">'error'</span>, console.error.<span class="function">bind</span>(console))</span><br><span class="line">        <span class="class">.pipe</span>(<span class="function">source</span>(<span class="string">'bundle.min.js'</span>))</span><br><span class="line">        <span class="class">.pipe</span>(<span class="function">buffer</span>())</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">if</span>(!config.production, plugins.sourcemaps.<span class="function">init</span>()))</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">uglify</span>())</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">rev</span>())</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">if</span>(!config.production, plugins.sourcemaps.<span class="function">write</span>(<span class="string">'.'</span>)))</span><br><span class="line">        <span class="class">.pipe</span>(gulp.<span class="function">dest</span>(config.paths.build))</span><br><span class="line">        <span class="class">.pipe</span>(plugins.rev.<span class="function">manifest</span>(config.paths.build + <span class="string">"/rev-manifest-js.json"</span>, &#123;<span class="attribute">cwd</span>: config.paths.build + <span class="string">"/"</span>, <span class="attribute">base</span>: config.paths.build + <span class="string">"/"</span>, <span class="attribute">merge</span>: true&#125;))</span><br><span class="line">        <span class="class">.pipe</span>(gulp.<span class="function">dest</span>(config.paths.build));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>This task uses babel and browserify to transform all JSX files, bundle/uglify/revision, and generate source map as well. We have to use vinyl-buffer to change a stream to a buffer.</p>
<h3 id="HTML">HTML</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> handlebarOptions = &#123;</span><br><span class="line">        helpers: &#123;</span><br><span class="line">            versionPath: <span class="function"><span class="keyword">function</span>(<span class="params">path, context</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> context.data.root[path];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> manifestCss = <span class="built_in">JSON</span>.parse(fs.readFileSync(config.paths.build + <span class="string">'/rev-manifest-css.json'</span>, <span class="string">'utf8'</span>));</span><br><span class="line">    <span class="keyword">var</span> manifestJs = <span class="built_in">JSON</span>.parse(fs.readFileSync(config.paths.build + <span class="string">'/rev-manifest-js.json'</span>, <span class="string">'utf8'</span>));</span><br><span class="line">    <span class="keyword">return</span> gulp.src(config.paths.html)</span><br><span class="line">        .pipe(plugins.compileHandlebars(objectAssign(manifestCss, manifestJs), handlebarOptions))</span><br><span class="line">        .pipe(gulp.dest(config.paths.build))</span><br><span class="line">        .pipe(plugins.connect.reload());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Js and Css file paths are always changing due to revision. We update html file to use the new paths with the help of gulp-compile-handlebars.</p>
<h3 id="Watch">Watch</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	gulp.watch(config.paths.html, [<span class="string">'html'</span>]);</span><br><span class="line">	gulp.watch(config.paths.scss, <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">            runSequence(<span class="string">'scss'</span>, <span class="string">'html'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">	gulp.watch([config.paths.mainJs, config.paths.appJs], <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span><br><span class="line">            runSequence(<span class="string">'js'</span>, <span class="string">'html'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>This task watches all src file changes and automatically run related tasks. Notice that all above tasks have plugins.connect.reload() in the pipe to refresh the browser for us. We can open up browswer, code editor, terminal side by side. Whenever we make a change in the editor, terminal will show us the result of each task, browser will auto refresh and reflect the changes. This is like a magic. We use run-sequence to make sure gulp runs html task after js task is finished so that we can get the correct revision file path. </p>
<h3 id="Connect">Connect</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">gulp</span><span class="class">.task</span>(<span class="string">'connect'</span>, <span class="function">function</span>() &#123;</span><br><span class="line">    <span class="tag">return</span> <span class="tag">plugins</span><span class="class">.connect</span><span class="class">.server</span>(&#123;</span><br><span class="line">        <span class="attribute">root</span>: [<span class="string">'build'</span>],</span><br><span class="line">        <span class="attribute">port</span>: config.port,</span><br><span class="line">        <span class="attribute">base</span>: config.devBaseUrl,</span><br><span class="line">        <span class="attribute">livereload</span>: true</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>gulp-connect will create an instance of local web server for development and support live reload.</p>
<h3 id="Open">Open</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">gulp</span><span class="class">.task</span>(<span class="string">'open'</span>, <span class="function">function</span>() &#123;</span><br><span class="line">    <span class="tag">gulp</span><span class="class">.src</span>(<span class="string">''</span>)</span><br><span class="line">        <span class="class">.pipe</span>(plugins.<span class="function">open</span>(&#123;</span><br><span class="line">            <span class="attribute">uri</span>: config.devBaseUrl + <span class="string">':'</span> + config.port + <span class="string">'/'</span>,</span><br><span class="line">            <span class="attribute">app</span>: browser</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>gulp-open opens up development browser for us.</p>
<h3 id="Default">Default</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (config.production) &#123;</span><br><span class="line">        runSequence(<span class="string">'clean'</span>, <span class="string">'scss'</span>, <span class="string">'js'</span>, <span class="string">'html'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        runSequence(<span class="string">'clean'</span>, <span class="string">'scss'</span>, <span class="string">'js'</span>, <span class="string">'html'</span>, <span class="string">'connect'</span>, <span class="string">'open'</span>, <span class="string">'watch'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Finally we set default tasks for Gulp. We run <code>./node_modules/.bin/gulp</code> for development and <code>./node_modules/.bin/gulp --production</code> for production.</p>
<h3 id="Github">Github</h3><p><a href="https://github.com/dujushi/snippets/tree/master/Gulp" target="_blank" rel="external">https://github.com/dujushi/snippets/tree/master/Gulp</a></p>
<h3 id="Reference">Reference</h3><ol>
<li><a href="https://github.com/google/web-starter-kit/blob/master/gulpfile.babel.js" target="_blank" rel="external">Google Web Starter Kit</a></li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/README.md" target="_blank" rel="external">Gulp Docs</a></li>
<li><a href="https://github.com/gulpjs/gulp/tree/master/docs/recipes#recipes" target="_blank" rel="external">Gulp Recipes</a></li>
<li><a href="https://github.com/aranasoft/todo-azurewebsites/wiki/Deploying-to-Azure" target="_blank" rel="external">Deploying to Azure</a></li>
<li><a href="https://knpuniversity.com/screencast/gulp" target="_blank" rel="external">Gulp! Refreshment for Your Frontend Assets</a></li>
<li><a href="https://github.com/coryhouse/react-flux-starter-kit/blob/master/gulpfile.js" target="_blank" rel="external">coryhouse/react-flux-starter-kit</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Gulp is a great tool for front end automation tasks. In this article I will show you how I use Gulp to boost my front end development efficiency.]]>
    
    </summary>
    
      <category term="Babel" scheme="http://dujushi.github.io/tags/Babel/"/>
    
      <category term="Bower" scheme="http://dujushi.github.io/tags/Bower/"/>
    
      <category term="Browerify" scheme="http://dujushi.github.io/tags/Browerify/"/>
    
      <category term="React" scheme="http://dujushi.github.io/tags/React/"/>
    
      <category term="Sass" scheme="http://dujushi.github.io/tags/Sass/"/>
    
      <category term="Gulp" scheme="http://dujushi.github.io/categories/Gulp/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Model Binding to Collections]]></title>
    <link href="http://dujushi.github.io/2015/12/21/Model-Binding-to-Collections/"/>
    <id>http://dujushi.github.io/2015/12/21/Model-Binding-to-Collections/</id>
    <published>2015-12-21T09:39:32.000Z</published>
    <updated>2015-12-29T02:51:26.000Z</updated>
    <content type="html"><![CDATA[<p>It is quit often we want to post a list of data to an action to save them. Ideally ASP.NET MVC Model Binding should be able to deal with this scenario. It should bind them into a list of data entities. And yes! Model Binding does offer us this convenicency. You can check out references below for more details. In this post, I will show how I use this feature with jQuery Ajax Post.<a id="more"></a></p>
<h3 id="Post_Action">Post Action</h3><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">HttpPost</span>]</span><br><span class="line">public ActionResult AddChores<span class="list">(<span class="keyword">ICollection&lt;Chore&gt;</span> chores)</span></span><br><span class="line">&#123;</span><br><span class="line">    if <span class="list">(<span class="keyword">chores.Any</span><span class="list">()</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _db.Chores.AddRange<span class="list">(<span class="keyword">chores</span>)</span><span class="comment">;</span></span><br><span class="line">        _db.SaveChanges<span class="list">()</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return Json<span class="list">(<span class="keyword">new</span> &#123; Success = true &#125;)</span><span class="comment">;</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>We declare a collection of chore data entities.</p>
<h3 id="Ajax_Post">Ajax Post</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".ux-submit-new-chores"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> chores = [];</span><br><span class="line">    $(<span class="string">".ux-new-chore"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> chore = &#123;</span><br><span class="line">            name: $(<span class="keyword">this</span>).find(<span class="string">'input[name="name"]'</span>).val(),</span><br><span class="line">            status: $(<span class="keyword">this</span>).find(<span class="string">'input[name="status"]'</span>).prop(<span class="string">"checked"</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        chores.push(chore);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        context: <span class="keyword">this</span>,</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        url: <span class="string">"/Home/AddChores/"</span>,</span><br><span class="line">        data: <span class="built_in">JSON</span>.stringify(&#123; chores &#125;),</span><br><span class="line">        contentType: <span class="string">"application/json; charset=utf-8"</span>,</span><br><span class="line">        dataType: <span class="string">"json"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (data.Success) &#123;</span><br><span class="line">                location.href = location.href;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>We loop through all new chores and generate an array of them. And we post the data in JSON format to the action method.</p>
<h3 id="Github">Github</h3><p><a href="https://github.com/dujushi/snippets/tree/master/CollectionModelBinding" target="_blank" rel="external">https://github.com/dujushi/snippets/tree/master/CollectionModelBinding</a></p>
<h3 id="References">References</h3><ol>
<li><a href="http://www.hanselman.com/blog/ASPNETWireFormatForModelBindingToArraysListsCollectionsDictionaries.aspx" target="_blank" rel="external">ASP.NET Wire Format for Model Binding to Arrays, Lists, Collections, Dictionaries</a></li>
<li><a href="http://stackoverflow.com/questions/5284613/asp-net-mvc-3-json-model-binding-to-array" target="_blank" rel="external">ASP.Net MVC 3 - JSON Model binding to array</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>It is quit often we want to post a list of data to an action to save them. Ideally ASP.NET MVC Model Binding should be able to deal with this scenario. It should bind them into a list of data entities. And yes! Model Binding does offer us this convenicency. You can check out references below for more details. In this post, I will show how I use this feature with jQuery Ajax Post.]]>
    
    </summary>
    
      <category term="Ajax" scheme="http://dujushi.github.io/tags/Ajax/"/>
    
      <category term="Model Binding" scheme="http://dujushi.github.io/tags/Model-Binding/"/>
    
      <category term="jQuery" scheme="http://dujushi.github.io/tags/jQuery/"/>
    
      <category term="ASP.NET MVC" scheme="http://dujushi.github.io/categories/ASP-NET-MVC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Pagination With Partial View]]></title>
    <link href="http://dujushi.github.io/2015/12/03/Pagination-With-Partial-View/"/>
    <id>http://dujushi.github.io/2015/12/03/Pagination-With-Partial-View/</id>
    <published>2015-12-03T09:45:26.000Z</published>
    <updated>2015-12-29T02:52:10.000Z</updated>
    <content type="html"><![CDATA[<p>This pagination feature with partial view was inspired by Adam Freeman’s pagination html helper in his book <code>&lt;Pro ASP.NET MVC 5&gt;</code>. Instead of using html helper, I implemented it with a partial view so I could customize the content and style easily.<a id="more"></a></p>
<h3 id="Pagination_View_Model">Pagination View Model</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Pagination</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> TotalItems &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> ItemsPerPage &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> CurrentPage &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> Func&lt;<span class="keyword">int</span>, <span class="keyword">string</span>&gt; PageUrl &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> TotalPages =&gt; (<span class="keyword">int</span>)Math.Ceiling((<span class="keyword">decimal</span>)TotalItems / ItemsPerPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We use lamba expression PageUrl to generate page url dynamically.</p>
<h3 id="Partial_View">Partial View</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">@model Pagination.Models.Pagination</span><br><span class="line"></span><br><span class="line">@&#123;</span><br><span class="line">    bool showPrevious = Model.CurrentPage &gt; 1;</span><br><span class="line">    bool showNext = Model.CurrentPage <span class="tag">&lt; <span class="attribute">Model.TotalPages</span>;</span><br><span class="line">    <span class="attribute">bool</span> <span class="attribute">showAll</span> = <span class="attribute">Model.TotalPages</span> &lt;= <span class="attribute">11</span>;</span><br><span class="line">    <span class="attribute">int</span> <span class="attribute">gapSize</span> = <span class="attribute">5</span>;</span><br><span class="line">    <span class="attribute">bool</span> <span class="attribute">showFirstGap</span> = <span class="attribute">Model.CurrentPage</span> <span class="attribute">-</span> <span class="attribute">1</span> &gt;</span>= gapSize;</span><br><span class="line">    bool showSecondGap = Model.TotalPages - Model.CurrentPage &gt;= gapSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@if (Model.TotalPages &gt; 1)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"paginate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">            @if (showPrevious)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"@Model.PageUrl(Model.CurrentPage - 1)"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @if (showAll)</span><br><span class="line">            &#123;</span><br><span class="line">                for (int i = 1; i <span class="tag">&lt;<span class="title">=</span> <span class="attribute">Model.TotalPages</span>; <span class="attribute">i</span>++)</span><br><span class="line">                &#123;</span><br><span class="line">                    &lt;<span class="attribute">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"@Model.PageUrl(i)"</span> <span class="attribute">class</span>=<span class="value">"@(Model.CurrentPage == i ? "</span><span class="value">active"</span> <span class="attribute">:</span> "")"&gt;</span>@i<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                if (showFirstGap &amp;&amp; showSecondGap)</span><br><span class="line">                &#123;</span><br><span class="line">                    for (int i = 1; i <span class="tag">&lt;<span class="title">=</span> <span class="attribute">2</span>; <span class="attribute">i</span>++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        &lt;<span class="attribute">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"@Model.PageUrl(i)"</span>&gt;</span>@i<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"gap"</span>&gt;</span>&amp;hellip;<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    for (int i = Model.CurrentPage - 1; i <span class="tag">&lt;<span class="title">=</span> <span class="attribute">Model.CurrentPage</span> + <span class="attribute">1</span>; <span class="attribute">i</span>++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        &lt;<span class="attribute">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"@Model.PageUrl(i)"</span> @(<span class="attribute">Model.CurrentPage</span> =<span class="value">=</span> <span class="attribute">i</span> ? "<span class="attribute">class</span>=<span class="value">active"</span> <span class="attribute">:</span> "")&gt;</span>@i<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"gap"</span>&gt;</span>&amp;hellip;<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    for (int i = Model.TotalPages - 1; i <span class="tag">&lt;<span class="title">=</span> <span class="attribute">Model.TotalPages</span>; <span class="attribute">i</span>++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        &lt;<span class="attribute">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"@Model.PageUrl(i)"</span>&gt;</span>@i<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else if (!showFirstGap)</span><br><span class="line">                &#123;</span><br><span class="line">                    for (int i = 1; i <span class="tag">&lt;<span class="title">=</span> <span class="attribute">gapSize</span> + <span class="attribute">1</span>; <span class="attribute">i</span>++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        &lt;<span class="attribute">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"@Model.PageUrl(i)"</span> @(<span class="attribute">Model.CurrentPage</span> =<span class="value">=</span> <span class="attribute">i</span> ? "<span class="attribute">class</span>=<span class="value">active"</span> <span class="attribute">:</span> "")&gt;</span>@i<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"gap"</span>&gt;</span>&amp;hellip;<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    for (int i = Model.TotalPages - 1; i <span class="tag">&lt;<span class="title">=</span> <span class="attribute">Model.TotalPages</span>; <span class="attribute">i</span>++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        &lt;<span class="attribute">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"@Model.PageUrl(i)"</span>&gt;</span>@i<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    for (int i = 1; i <span class="tag">&lt;<span class="title">=</span> <span class="attribute">2</span>; <span class="attribute">i</span>++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        &lt;<span class="attribute">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"@Model.PageUrl(i)"</span>&gt;</span>@i<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span> <span class="attribute">class</span>=<span class="value">"gap"</span>&gt;</span>&amp;hellip;<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    for (int i = Model.TotalPages - gapSize; i <span class="tag">&lt;<span class="title">=</span> <span class="attribute">Model.TotalPages</span>; <span class="attribute">i</span>++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        &lt;<span class="attribute">li</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"@Model.PageUrl(i)"</span> @(<span class="attribute">Model.CurrentPage</span> =<span class="value">=</span> <span class="attribute">i</span> ? "<span class="attribute">class</span>=<span class="value">active"</span> <span class="attribute">:</span> "")&gt;</span>@i<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @if (showNext)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="tag">&lt;<span class="title">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"@Model.PageUrl(Model.CurrentPage + 1)"</span>&gt;</span>Next<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>If there are more than 11 page links, it will hide some page links to make it tidy.</p>
<h3 id="Style">Style</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.paginate</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.paginate</span> <span class="tag">ul</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">list-style</span>:<span class="value"> none</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.paginate</span> <span class="tag">li</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline</span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.paginate</span> <span class="tag">a</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">text-decoration</span>:<span class="value"> none</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">1px</span> <span class="number">2px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">5px</span> <span class="number">10px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">3px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>) <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#717171</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#f5f5f5</span></span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.paginate</span> <span class="class">.active</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#f2f2f2</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#676767</span></span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="hexcolor">#505050</span></span></span>; </span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.paginate</span> <span class="class">.gap</span> <span class="rules">&#123;</span><br><span class="line">    <span class="rule"><span class="attribute">background</span>:<span class="value"> transparent</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> transparent</span></span>;</span><br><span class="line">    <span class="rule"><span class="attribute">cursor</span>:<span class="value"> context-menu</span></span>; </span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>I borrowed some nice style from this repo: <a href="https://github.com/brajeshwar/paginate" target="_blank" rel="external">https://github.com/brajeshwar/paginate</a></p>
<h3 id="Controller">Controller</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">List</span><span class="params">(<span class="keyword">int</span> page = <span class="number">1</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    var model = db.Tasks.OrderByDescending(t =&gt; t.Id).AsQueryable();</span><br><span class="line">    <span class="keyword">int</span> totalItems = model.Count();</span><br><span class="line">    <span class="keyword">int</span> itemsPerPage = <span class="number">10</span>;</span><br><span class="line">    model = model</span><br><span class="line">        .Skip(itemsPerPage*(page - <span class="number">1</span>))</span><br><span class="line">        .Take(itemsPerPage);</span><br><span class="line"></span><br><span class="line">    ViewBag.Pagination = <span class="keyword">new</span> Pagination</span><br><span class="line">    &#123;</span><br><span class="line">        TotalItems = totalItems,</span><br><span class="line">        ItemsPerPage = itemsPerPage,</span><br><span class="line">        CurrentPage = page,</span><br><span class="line">        PageUrl = x =&gt; Url.Action(<span class="string">"List"</span>, <span class="keyword">new</span> &#123;page = x&#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View(model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Include_Partial_View">Include Partial View</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Html.<span class="function"><span class="title">Partial</span><span class="params">(<span class="string">"_Pagination"</span>, (Pagination)</span><span class="title">ViewBag</span></span>.Pagination)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>This pagination feature with partial view was inspired by Adam Freeman’s pagination html helper in his book <code>&lt;Pro ASP.NET MVC 5&gt;</code>. Instead of using html helper, I implemented it with a partial view so I could customize the content and style easily.]]>
    
    </summary>
    
      <category term="C Sharp" scheme="http://dujushi.github.io/tags/C-Sharp/"/>
    
      <category term="Pagination" scheme="http://dujushi.github.io/tags/Pagination/"/>
    
      <category term="Partial View" scheme="http://dujushi.github.io/tags/Partial-View/"/>
    
      <category term="ASP.NET MVC" scheme="http://dujushi.github.io/categories/ASP-NET-MVC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Implement Show More Button for A Task List]]></title>
    <link href="http://dujushi.github.io/2015/11/26/Implement-Show-More-Button-for-A-Task-List/"/>
    <id>http://dujushi.github.io/2015/11/26/Implement-Show-More-Button-for-A-Task-List/</id>
    <published>2015-11-26T07:20:19.000Z</published>
    <updated>2015-12-29T02:50:39.000Z</updated>
    <content type="html"><![CDATA[<p>To limite page size, we only want to list a limited number of items at first. And then click Show More button to render more items. We can use partial view to reuse our code. In this example we will implement a simple task list.<a id="more"></a> </p>
<ol>
<li><p>Create show task action</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">ShowTask</span><span class="params">(<span class="keyword">bool</span> showAll = <span class="literal">false</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pageSize = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">bool</span> showMoreButton = <span class="literal">false</span>;</span><br><span class="line">    var model = db.Tasks.AsQueryable();</span><br><span class="line">    <span class="keyword">if</span> (!showAll)</span><br><span class="line">    &#123;</span><br><span class="line">        showMoreButton = model.Count() &gt; pageSize;</span><br><span class="line">        model = model.Take(pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">    ViewBag.ShowMoreButton = showMoreButton;</span><br><span class="line">    <span class="keyword">return</span> PartialView(<span class="string">"_ShowTask"</span>, model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create PartialView _ShowTask.cshtml</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@model IEnumerable&lt;HtmlAction.Models.Task&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"task_container"</span>&gt;</span><br><span class="line">    @foreach (var <span class="property">item</span> <span class="keyword">in</span> Model)</span><br><span class="line">    &#123;</span><br><span class="line">        &lt;<span class="keyword">div</span> data-<span class="property">id</span>=<span class="string">"@item.Id"</span> <span class="type">class</span>=<span class="string">"task_item"</span>&gt;</span><br><span class="line">            &lt;span&gt;</span><br><span class="line">            @<span class="property">item</span>.Content</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">            &lt;a href=<span class="string">"#"</span> <span class="type">class</span>=<span class="string">"switch@(item.Status ? "</span> complete<span class="string">" : "</span><span class="string">")"</span> title=<span class="string">"Complete"</span>&gt;&amp;<span class="comment">#10004&lt;/a&gt;</span></span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">if</span> (ViewBag.ShowMoreButton)</span><br><span class="line">    &#123;</span><br><span class="line">        &lt;a href=<span class="string">"#"</span> <span class="property">id</span>=<span class="string">"show_more"</span>&gt;Show More&lt;/a&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>In the list page, we can use Html.Action to show some items.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Html.<span class="function"><span class="title">Action</span><span class="params">(<span class="string">"ShowTask"</span>)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>And then we implement an AJAX function for ‘Show More’ button.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#show_more"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">"GET"</span>,</span><br><span class="line">        url: <span class="string">"/Task/ShowTask"</span>,</span><br><span class="line">        data: &#123; <span class="string">"showAll"</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"#task_container"</span>).html(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">request, status, err</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"System error, try again later."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>We may want to implement an AJAX function to switch the status.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"click"</span>, <span class="string">".switch"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $(<span class="keyword">this</span>).closest(<span class="string">".task_item"</span>).data(<span class="string">"id"</span>);</span><br><span class="line">    <span class="keyword">var</span> className = <span class="string">"complete"</span>;</span><br><span class="line">    <span class="keyword">var</span> status = $(<span class="keyword">this</span>).hasClass(className);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        context: <span class="keyword">this</span>,</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        url: <span class="string">"/Task/StatusSwitch"</span>,</span><br><span class="line">        data: &#123; <span class="string">"id"</span>: id, <span class="string">"status"</span>: status &#125;,</span><br><span class="line">        dataType: <span class="string">"json"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (data.Success == <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (status) &#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).removeClass(className);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).addClass(className);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">"System error, try again later."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="keyword">function</span> (<span class="params">request, status, err</span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"System error, try again later."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>There are some tricks in this function:</p>
<ol>
<li>we use <code>$(document).on(&quot;click&quot;, &quot;.switch&quot;, function () {})</code> instead of <code>$(&quot;.switch&quot;).click(function() {})</code>, so that all AJAX renderred switches can invoke the AJAX function as well.</li>
<li>We add <code>context: this</code> to change context to the switch button we click on. So we can change the style of the switch button inside the function.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>To limite page size, we only want to list a limited number of items at first. And then click Show More button to render more items. We can use partial view to reuse our code. In this example we will implement a simple task list.]]>
    
    </summary>
    
      <category term="AJAX" scheme="http://dujushi.github.io/tags/AJAX/"/>
    
      <category term="C Sharp" scheme="http://dujushi.github.io/tags/C-Sharp/"/>
    
      <category term="jQuery" scheme="http://dujushi.github.io/tags/jQuery/"/>
    
      <category term="ASP.NET MVC" scheme="http://dujushi.github.io/categories/ASP-NET-MVC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Generate A Dropdown List for Enum]]></title>
    <link href="http://dujushi.github.io/2015/11/26/Generate-A-Dropdown-List-for-Enum/"/>
    <id>http://dujushi.github.io/2015/11/26/Generate-A-Dropdown-List-for-Enum/</id>
    <published>2015-11-26T06:56:52.000Z</published>
    <updated>2015-12-29T02:52:01.000Z</updated>
    <content type="html"><![CDATA[<p>We often use an Enum in C# to define all options for a field, such as a category Enum:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">CategoryEnum</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="constant">Book</span>,</span><br><span class="line">    <span class="constant">Food</span>,</span><br><span class="line">    <span class="constant">Tourism</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And we need a dropdown list for this category field. How would you implement this?<a id="more"></a></p>
<h3 id="Basic">Basic</h3><p>First, we get all values of CategoryEnum:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enum.<span class="function"><span class="title">GetValues</span><span class="params">(typeof(CategoryEnum)</span></span>)</span><br></pre></td></tr></table></figure></p>
<p>Then, we generate all select items for these values:<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Enum</span>.<span class="type">GetValues</span>(typeof(<span class="type">CategoryEnum</span>)).<span class="type">Cast</span>&lt;<span class="type">CategoryEnum</span>&gt;<span class="literal">()</span>.<span class="type">Select</span>(t =&gt; new <span class="type">SelectListItem</span> &#123; <span class="type">Text</span> = t.<span class="type">ToString</span><span class="literal">()</span>, <span class="type">Value</span> = ((<span class="built_in">int</span>)t).<span class="type">ToString</span><span class="literal">()</span> &#125;)</span><br></pre></td></tr></table></figure></p>
<p>Here we use <code>Cast&lt;CategoryEnum&gt;()</code> to cast all the values so we can apply Select method on them.<br>Finally, we have our dropdown list:<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Html</span>.<span class="type">DropDownListFor</span>(m =&gt; m.<span class="type">Category</span>, <span class="type">Enum</span>.<span class="type">GetValues</span>(typeof(<span class="type">CategoryEnum</span>)).<span class="type">Cast</span>&lt;<span class="type">CategoryEnum</span>&gt;<span class="literal">()</span>.<span class="type">Select</span>(t =&gt; new <span class="type">SelectListItem</span> &#123; <span class="type">Text</span> = t.<span class="type">ToString</span><span class="literal">()</span>, <span class="type">Value</span> = ((<span class="built_in">int</span>)t).<span class="type">ToString</span><span class="literal">()</span> &#125;), <span class="string">"Select one"</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="Custom_Text">Custom Text</h3><p>We can add descriptions to CategoryEnum and use them as the text value of each select list item.<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">CategoryEnum</span></span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="constant">Description</span>(<span class="string">"Fancy Book"</span>)]</span><br><span class="line">    <span class="constant">Book</span>,</span><br><span class="line">    [<span class="constant">Description</span>(<span class="string">"Delicious Food"</span>)]</span><br><span class="line">    <span class="constant">Food</span>,</span><br><span class="line">    [<span class="constant">Description</span>(<span class="string">"The World Is Big"</span>)]</span><br><span class="line">    <span class="constant">Tourism</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>We then get the description with Attribute.GetCustomAttribute method.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((DescriptionAttribute)Attribute.<span class="function"><span class="title">GetCustomAttribute</span><span class="params">((t.GetType()</span></span>).<span class="function"><span class="title">GetField</span><span class="params">(t.ToString()</span></span>), <span class="function"><span class="title">typeof</span><span class="params">(DescriptionAttribute)</span></span>)).Description</span><br></pre></td></tr></table></figure></p>
<p>The updated code for the dropdown list would be:<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Html</span>.<span class="type">DropDownListFor</span>(m =&gt; m.<span class="type">Category</span>, <span class="type">Enum</span>.<span class="type">GetValues</span>(typeof(<span class="type">CategoryEnum</span>)).<span class="type">Cast</span>&lt;<span class="type">CategoryEnum</span>&gt;<span class="literal">()</span>.<span class="type">Select</span>(t =&gt; new <span class="type">SelectListItem</span> &#123; <span class="type">Text</span> = ((<span class="type">DescriptionAttribute</span>)<span class="type">Attribute</span>.<span class="type">GetCustomAttribute</span>((t.<span class="type">GetType</span><span class="literal">()</span>).<span class="type">GetField</span>(t.<span class="type">ToString</span><span class="literal">()</span>), typeof(<span class="type">DescriptionAttribute</span>))).<span class="type">Description</span>, <span class="type">Value</span> = ((<span class="built_in">int</span>)t).<span class="type">ToString</span><span class="literal">()</span> &#125;), <span class="string">"Select one"</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="Option_Group">Option Group</h3><p>Sometimes we only want to display a subset of the Enum. We can define a static class for this so it can be shared everywhere.<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryEnumGroups</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CategoryEnum[] OutdoorGroup = &#123; CategoryEnum.Food, CategoryEnum.Tourism &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Then we can filter them with Where method.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enum.<span class="function"><span class="title">GetValues</span><span class="params">(typeof(CategoryEnum)</span></span>).Cast&lt;CategoryEnum&gt;().<span class="function"><span class="title">Where</span><span class="params">(t =&gt; CategoryEnumGroups.OutdoorGroup.Contains(t)</span></span>)</span><br></pre></td></tr></table></figure></p>
<p>Final dropdown list code:<br><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">Html</span>.<span class="type">DropDownListFor</span>(m =&gt; m.<span class="type">Category</span>, <span class="type">Enum</span>.<span class="type">GetValues</span>(typeof(<span class="type">CategoryEnum</span>)).<span class="type">Cast</span>&lt;<span class="type">CategoryEnum</span>&gt;<span class="literal">()</span>.<span class="type">Where</span>(t =&gt; <span class="type">CategoryEnumGroups</span>.<span class="type">OutdoorGroup</span>.<span class="type">Contains</span>(t)).<span class="type">Select</span>(t =&gt; new <span class="type">SelectListItem</span> &#123; <span class="type">Text</span> = ((<span class="type">DescriptionAttribute</span>)<span class="type">Attribute</span>.<span class="type">GetCustomAttribute</span>((t.<span class="type">GetType</span><span class="literal">()</span>).<span class="type">GetField</span>(t.<span class="type">ToString</span><span class="literal">()</span>), typeof(<span class="type">DescriptionAttribute</span>))).<span class="type">Description</span>, <span class="type">Value</span> = ((<span class="built_in">int</span>)t).<span class="type">ToString</span><span class="literal">()</span> &#125;), <span class="string">"Select one"</span>)</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>We often use an Enum in C# to define all options for a field, such as a category Enum:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">CategoryEnum</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="constant">Book</span>,</span><br><span class="line">    <span class="constant">Food</span>,</span><br><span class="line">    <span class="constant">Tourism</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And we need a dropdown list for this category field. How would you implement this?]]>
    
    </summary>
    
      <category term="C Sharp" scheme="http://dujushi.github.io/tags/C-Sharp/"/>
    
      <category term="Dropdown List" scheme="http://dujushi.github.io/tags/Dropdown-List/"/>
    
      <category term="Enum" scheme="http://dujushi.github.io/tags/Enum/"/>
    
      <category term="ASP.NET MVC" scheme="http://dujushi.github.io/categories/ASP-NET-MVC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Custom Validator For ASP.NET MVC: MustBeTrue]]></title>
    <link href="http://dujushi.github.io/2015/11/18/Custom-Validator-For-ASP-NET-MVC-MustBeTrue/"/>
    <id>http://dujushi.github.io/2015/11/18/Custom-Validator-For-ASP-NET-MVC-MustBeTrue/</id>
    <published>2015-11-18T07:22:05.000Z</published>
    <updated>2015-12-29T02:50:52.000Z</updated>
    <content type="html"><![CDATA[<p>Recently I was working on a small project to add a checkbox for users to accept Terms and Conditions during registration. In order to use the built-in validation functions by ASP.NET MVC, I wrote a small custom validator for this: MustBeTrue.<a id="more"></a></p>
<ol>
<li><p>Create MustBeTrueAttribute.cs file under Attributes folder</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[AttributeUsage(AttributeTargets.Property, AllowMultiple = <span class="literal">false</span>, Inherited = <span class="literal">true</span>)]</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MustBeTrueAttribute</span> : <span class="typename">ValidationAttribute</span>, <span class="typename">IClientValidatable</span></span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// for server side validation</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">override</span> bool IsValid(<span class="keyword">object</span> value)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> value <span class="keyword">is</span> bool &amp;&amp; (bool)value;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// add data- to elements for client side validation</span></span><br><span class="line">	<span class="keyword">public</span> IEnumerable<span class="type">&lt;ModelClientValidationRule&gt;</span> GetClientValidationRules(ModelMetadata metadata, ControllerContext context)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="variable"><span class="keyword">var</span> clientValidationRule</span> = new ModelClientValidationRule()</span><br><span class="line">		&#123;</span><br><span class="line">			ErrorMessage = FormatErrorMessage(metadata.GetDisplayName()),</span><br><span class="line">			ValidationType = <span class="string">"mustbetrue"</span></span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">return</span> new[] &#123; clientValidationRule &#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Create an adapter for Unobtrusive: jquery.validate.unobtrusive.mustbetrue.js</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">function</span> <span class="list">($)</span> <span class="collection">&#123;</span><br><span class="line">    $.validator.addMethod<span class="list">(<span class="string">"mustbetrue"</span>, function <span class="list">(<span class="keyword">value</span>, element, params)</span> <span class="collection">&#123;</span><br><span class="line">		//check whether the element is checked</span><br><span class="line">        return $<span class="list">(<span class="keyword">element</span>)</span>.is<span class="list">(<span class="string">":checked"</span>)</span><span class="comment">;</span></span><br><span class="line">    &#125;</span>)</span><span class="comment">;</span></span><br><span class="line">    $.validator.unobtrusive.adapters.addBool<span class="list">(<span class="string">"mustbetrue"</span>)</span><span class="comment">;</span></span><br><span class="line">&#125;</span><span class="list">(<span class="keyword">jQuery</span>)</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Usage in View Model</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">MustBeTrue</span><span class="list">(<span class="keyword">ErrorMessage</span> = <span class="string">"Please accept the Terms &amp; Conditions."</span>)</span>]</span><br><span class="line"><span class="list">[<span class="keyword">DisplayName</span><span class="list">(<span class="string">"I accept the Terms &amp; Conditions."</span>)</span>]</span><br><span class="line">public bool AcceptTerms &#123; get<span class="comment">; set; &#125;</span></span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Github">Github</h3><p><a href="https://github.com/dujushi/snippets/tree/master/MustBeTrue" target="_blank" rel="external">https://github.com/dujushi/snippets/tree/master/MustBeTrue</a></p>
<h3 id="Reference:">Reference:</h3><ol>
<li><a href="http://jasonwatmore.com/post/2013/10/16/ASPNET-MVC-Required-Checkbox-with-Data-Annotations.aspx" target="_blank" rel="external">ASP.NET MVC - Required Checkbox with Data Annotations</a></li>
<li><a href="http://www.devtrends.co.uk/blog/the-complete-guide-to-validation-in-asp.net-mvc-3-part-1" target="_blank" rel="external">THE COMPLETE GUIDE TO VALIDATION IN ASP.NET MVC 3</a></li>
<li><a href="http://bradwilson.typepad.com/blog/2010/10/mvc3-unobtrusive-validation.html" target="_blank" rel="external">Unobtrusive Client Validation in ASP.NET MVC 3</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Recently I was working on a small project to add a checkbox for users to accept Terms and Conditions during registration. In order to use the built-in validation functions by ASP.NET MVC, I wrote a small custom validator for this: MustBeTrue.]]>
    
    </summary>
    
      <category term="Validation" scheme="http://dujushi.github.io/tags/Validation/"/>
    
      <category term="ASP.NET MVC" scheme="http://dujushi.github.io/categories/ASP-NET-MVC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ASP.NET Web Development With Visual Studio 2015 and Local IIS 7 on Windows 7]]></title>
    <link href="http://dujushi.github.io/2015/11/12/ASP-NET-Web-Development-With-Visual-Studio-2015-and-Local-IIS-7-on-Windows-7/"/>
    <id>http://dujushi.github.io/2015/11/12/ASP-NET-Web-Development-With-Visual-Studio-2015-and-Local-IIS-7-on-Windows-7/</id>
    <published>2015-11-12T08:41:30.000Z</published>
    <updated>2015-11-12T09:34:47.000Z</updated>
    <content type="html"><![CDATA[<p>Visual Studio 2015 provides ASP.NET web development environment directly with IIS Express. It is very straight forward to start web development with this setting. But if you ever used Visual Studio 2015 with Local IIS, you would find that it is much more convenient and you would love it.</p>
<p>This tutorial will go through how to set up ASP.NET web development environment with Visual Studio 2015 and Local IIS on Windows 7 briefly.<a id="more"></a></p>
<h3 id="Install_IIS_7_on_Windows_7">Install IIS 7 on Windows 7</h3><p>Windows 7 comes with IIS support. But you need to turn on the features from Control Panel. Follow this <a href="http://www.iis.net/learn/install/installing-iis-7/installing-iis-on-windows-vista-and-windows-7" target="_blank" rel="external">link</a> to set it up.</p>
<p>You can also install IIS extensions and popular applications (such as <a href="http://umbraco.com" target="_blank" rel="external">Umbraco</a>, the famous CMS application with .NET) with Microsoft Web Platform Installer. Check this <a href="https://www.microsoft.com/web/downloads/platform.aspx" target="_blank" rel="external">link</a> out.</p>
<h3 id="Create_a_new_website_with_Visual_Studio_2015">Create a new website with Visual Studio 2015</h3><p>You can simply create one with the default MVC template.</p>
<h3 id="Create_a_new_host_on_IIS">Create a new host on IIS</h3><p>Open IIS Manager. And then follow this <a href="https://www.microsoft.com/web/downloads/platform.aspx" target="_blank" rel="external">link</a> to set up a new site.</p>
<h3 id="Configure_VS_to_use_Local_IIS">Configure VS to use Local IIS</h3><p>In VS, open Properties under Solution Explorer. Go to Web tab. Update Servers to use Local IIS. Enter the Project URL you set up in step 3. Add the host binding in hosts file. Now you are ready to run the new site.</p>
<h3 id="Trouble_Shootings">Trouble Shootings</h3><p>If you get blank page, make sure your application pool is using the latest .NET framework. Go to Application Pools in IIS Manager and fix the setting. Or go to your site setting in IIS, check your Handler Mappings have .cshtml. Otherwise, you may need to reinstall .NET framework with this command:</p>
<blockquote>
<p>aspnet_regiis -i</p>
</blockquote>
<p>Check this <a href="https://www.microsoft.com/web/downloads/platform.aspx" target="_blank" rel="external">link</a> for more info.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Visual Studio 2015 provides ASP.NET web development environment directly with IIS Express. It is very straight forward to start web development with this setting. But if you ever used Visual Studio 2015 with Local IIS, you would find that it is much more convenient and you would love it.</p>
<p>This tutorial will go through how to set up ASP.NET web development environment with Visual Studio 2015 and Local IIS on Windows 7 briefly.]]>
    
    </summary>
    
      <category term="Local IIS" scheme="http://dujushi.github.io/tags/Local-IIS/"/>
    
      <category term="Visual Studio 2015" scheme="http://dujushi.github.io/tags/Visual-Studio-2015/"/>
    
      <category term="Windows 7" scheme="http://dujushi.github.io/tags/Windows-7/"/>
    
      <category term="ASP.NET MVC" scheme="http://dujushi.github.io/categories/ASP-NET-MVC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Magento 1 Development Environment Setup]]></title>
    <link href="http://dujushi.github.io/2015/10/08/Magento-1-Development-Environment-Setup/"/>
    <id>http://dujushi.github.io/2015/10/08/Magento-1-Development-Environment-Setup/</id>
    <published>2015-10-08T08:12:25.000Z</published>
    <updated>2015-12-29T02:54:20.000Z</updated>
    <content type="html"><![CDATA[<p>There is an advanced Magento development environment setup tool implemented by <a href="https://github.com/davidalger/devenv" target="_blank" rel="external">davidalger</a>. But I’d like to keep my env simple and basic:P So I decided to make my own.<a id="more"></a> </p>
<p>The Env is a simple LAMP server with some basic automations based on Vagrant and Virtualbox. I chose to set it up with the most popular Vagrant box <a href="https://atlas.hashicorp.com/ubuntu/boxes/trusty64" target="_blank" rel="external">ubuntu/trusty64</a>. Then, I wrote a simple shell script lamp.sh as a provisoning file to install LAMP and set up the demo site mage.local. If you need another brand new demo site, simply call: <code>sh alpha.sh</code>. This will set up another site: alpha.local. Otherwise, you can recreate the mage.local demo site by calling <code>sh mage.local</code>. </p>
<p>This setup is basic. Everything is static, but it suffices to boost my local development anyway:P</p>
<p>Check it out if you want: <a href="https://github.com/dujushi/magento-I-development-env" target="_blank" rel="external">https://github.com/dujushi/magento-I-development-env</a>.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>There is an advanced Magento development environment setup tool implemented by <a href="https://github.com/davidalger/devenv">davidalger</a>. But I’d like to keep my env simple and basic:P So I decided to make my own.]]>
    
    </summary>
    
      <category term="Development Environment" scheme="http://dujushi.github.io/tags/Development-Environment/"/>
    
      <category term="Magento 1" scheme="http://dujushi.github.io/tags/Magento-1/"/>
    
      <category term="Magento 1" scheme="http://dujushi.github.io/categories/Magento-1/"/>
    
  </entry>
  
</feed>
